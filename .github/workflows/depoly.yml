name: Deploy to Feurix Server

on:
  push:
    branches:
      - main

env:
  DEPLOY_PATH: /var/www/feurix
  RELEASES_PATH: /var/www/feurix/releases

jobs:
  build-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Build backend with uv
        run: |
          cd backend
          uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist/
          retention-days: 1

  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package.json

      - name: Clean install dependencies
        run: |
          cd frontend
          rm -f package-lock.json
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/build/
          retention-days: 1

  deploy-backend:
    runs-on: ubuntu-latest
    environment: deployment
    needs: [build-backend, build-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up deployment variables
        run: |
          echo "RELEASE_NAME=$(date +%s)" >> $GITHUB_ENV
          echo "BASE_RELEASE_PATH=${{ env.RELEASES_PATH }}/${{ github.run_number }}" >> $GITHUB_ENV
          echo "BACKEND_DIR=${{ env.RELEASES_PATH }}/${{ github.run_number }}/backend" >> $GITHUB_ENV
          echo "FRONTEND_DIR=${{ env.RELEASES_PATH }}/${{ github.run_number }}/frontend" >> $GITHUB_ENV

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/dist/

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/build/

      - name: Create directories on server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.PRIV_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            mkdir -p ${{ env.BACKEND_DIR }}
            mkdir -p ${{ env.FRONTEND_DIR }}
            cd ${{ env.RELEASES_PATH }}
            rm current || true
            ln -sf ${{ env.BASE_RELEASE_PATH }} current
            

      - name: Upload backend to server
        run: |
          echo "${{ secrets.PRIV_KEY }}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
      
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      
          rsync -avz -e "ssh -i /tmp/deploy_key -p ${{ secrets.SSH_PORT }}" \
            ./backend/dist/ \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.HOST }}:${{ env.BACKEND_DIR }}
      
          rm -f /tmp/deploy_key

      - name: Install backend dependencies
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.PRIV_KEY }}
          port: ${{ secrets.SSH_PORT }}
          command_timeout: 30m
          script: |
            # Source shell profiles to load PATH and other environment variables
            source ~/.bashrc 2>/dev/null || true
            source ~/.profile 2>/dev/null || true
            source ~/.bash_profile 2>/dev/null || true
            
            # Alternative: Load pyenv if available
            if [ -d "$HOME/.pyenv" ]; then
              export PYENV_ROOT="$HOME/.pyenv"
              export PATH="$PYENV_ROOT/bin:$PATH"
              eval "$(pyenv init --path)" 2>/dev/null || true
              eval "$(pyenv init -)" 2>/dev/null || true
            fi
            
            cd ${{ env.BACKEND_DIR }}
            
            # Debug: Show current environment
            echo "Current PATH: $PATH"
            echo "Python version: $(python3 --version 2>/dev/null || echo 'Python not found')"
            echo "UV location: $(which uv 2>/dev/null || echo 'UV not found')"
            
            # Create Python virtual environment
            uv venv
            
            # Activate virtual environment and install wheel
            source .venv/bin/activate
            uv pip install *.whl 
            tar -xzf *.tar.gz --strip-components=1
            
            # Run database migrations
            # alembic upgrade head
            
            #restart systemd service
            sudo systemctl restart feurix-backend.service

      - name: Deploy frontend to server
        run: |
          echo "${{ secrets.PRIV_KEY }}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
      
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          
          # Upload built frontend files directly to web root
          rsync -avz -e "ssh -i /tmp/deploy_key -p ${{ secrets.SSH_PORT }}" \
            ./frontend/build/ \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.HOST }}:/var/www/html/
          
          rm -f /tmp/deploy_key

