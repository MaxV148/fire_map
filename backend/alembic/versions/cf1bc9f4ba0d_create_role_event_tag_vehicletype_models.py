"""create role, event, tag, vehicletype models

Revision ID: cf1bc9f4ba0d
Revises: 265abe174d72
Create Date: 2025-03-11 23:43:58.940001

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = "cf1bc9f4ba0d"
down_revision: Union[str, None] = "265abe174d72"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "role",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=20), nullable=False),
        sa.Column("description", sa.String(length=250), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_role_id"), "role", ["id"], unique=False)
    op.create_index(op.f("ix_role_name"), "role", ["name"], unique=False)
    op.create_table(
        "tag",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=20), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_tag_id"), "tag", ["id"], unique=False)
    op.create_index(op.f("ix_tag_name"), "tag", ["name"], unique=False)
    op.create_table(
        "vehicletype",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_vehicletype_id"), "vehicletype", ["id"], unique=False)
    op.create_index(op.f("ix_vehicletype_name"), "vehicletype", ["name"], unique=False)
    op.create_table(
        "event",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("description", sa.String(length=250), nullable=True),
        sa.Column(
            "location",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("tag_id", sa.Integer(), nullable=True),
        sa.Column("vehicle_id", sa.Integer(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vehicle_id"],
            ["vehicletype.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_event_location",
        "event",
        ["location"],
        unique=False,
        postgresql_using="gist",
        if_not_exists=True,
    )
    op.create_index(op.f("ix_event_id"), "event", ["id"], unique=False)
    op.create_index(op.f("ix_event_name"), "event", ["name"], unique=False)
    op.create_table(
        "issue",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("description", sa.String(length=250), nullable=True),
        sa.Column("tag_id", sa.Integer(), nullable=True),
        sa.Column("created_by_user_id", sa.Integer(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_issue_id"), "issue", ["id"], unique=False)
    op.create_index(op.f("ix_issue_name"), "issue", ["name"], unique=False)
    op.drop_index(
        "idx_exercises_location", table_name="exercises", postgresql_using="gist"
    )
    op.drop_index("ix_exercises_id", table_name="exercises")
    op.drop_table("exercises")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "exercises",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "location",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                from_text="ST_GeomFromEWKT",
                name="geometry",
                _spatial_index_reflected=True,
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("name", sa.VARCHAR(length=75), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.VARCHAR(length=400), autoincrement=False, nullable=True
        ),
        sa.Column("trainer", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["trainer"], ["user.id"], name="exercises_trainer_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="exercises_pkey"),
    )
    op.create_index("ix_exercises_id", "exercises", ["id"], unique=False)
    op.create_index(
        "idx_exercises_location",
        "exercises",
        ["location"],
        unique=False,
        postgresql_using="gist",
    )
    op.drop_index(op.f("ix_issue_name"), table_name="issue")
    op.drop_index(op.f("ix_issue_id"), table_name="issue")
    op.drop_table("issue")
    op.drop_index(op.f("ix_event_name"), table_name="event")
    op.drop_index(op.f("ix_event_id"), table_name="event")
    op.drop_index(
        "idx_event_location",
        table_name="event",
        postgresql_using="gist",
        if_exists=True,
    )
    op.drop_table("event")
    op.drop_index(op.f("ix_vehicletype_name"), table_name="vehicletype")
    op.drop_index(op.f("ix_vehicletype_id"), table_name="vehicletype")
    op.drop_table("vehicletype")
    op.drop_index(op.f("ix_tag_name"), table_name="tag")
    op.drop_index(op.f("ix_tag_id"), table_name="tag")
    op.drop_table("tag")
    op.drop_index(op.f("ix_role_name"), table_name="role")
    op.drop_index(op.f("ix_role_id"), table_name="role")
    op.drop_table("role")
    # ### end Alembic commands ###
