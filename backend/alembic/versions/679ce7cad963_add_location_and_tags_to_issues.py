"""add location and tags to issues

Revision ID: 679ce7cad963
Revises: 4cbd895e1134
Create Date: 2025-03-25 21:57:01.566993

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision: str = '679ce7cad963'
down_revision: Union[str, None] = '4cbd895e1134'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('issue_tags',
    sa.Column('issue_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['issue_id'], ['issue.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('issue_id', 'tag_id')
    )
    op.add_column('issue', sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True))
    
    # Check if index exists before creating it
    conn = op.get_bind()
    result = conn.execute(text("SELECT 1 FROM pg_indexes WHERE indexname = 'idx_issue_location'"))
    if not result.scalar():
        op.create_index('idx_issue_location', 'issue', ['location'], unique=False, postgresql_using='gist')
    
    op.drop_constraint('issue_tag_id_fkey', 'issue', type_='foreignkey')
    op.drop_column('issue', 'tag_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('issue', sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('issue_tag_id_fkey', 'issue', 'tag', ['tag_id'], ['id'])
    op.drop_index('idx_issue_location', table_name='issue', postgresql_using='gist')
    op.drop_column('issue', 'location')
    op.drop_table('issue_tags')
    # ### end Alembic commands ###
