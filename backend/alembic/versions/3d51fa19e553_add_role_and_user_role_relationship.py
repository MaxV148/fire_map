"""add_role_and_user_role_relationship

Revision ID: 3d51fa19e553
Revises: a91f9c0d6424
Create Date: 2025-03-24 20:59:00.905693

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "3d51fa19e553"
down_revision: Union[str, None] = "a91f9c0d6424"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Füge zuerst die Standardrollen ein
    op.execute(
        "INSERT INTO role (name, description) VALUES ('admin', 'Administrator mit vollem Zugriff')"
    )
    op.execute(
        "INSERT INTO role (name, description) VALUES ('user', 'Standardbenutzer mit Basiszugriff')"
    )

    # Füge role_id zur User-Tabelle hinzu (zunächst nullable)
    op.add_column(
        "user", sa.Column("role_id", sa.Integer(), nullable=True, server_default="2")
    )
    op.create_index(op.f("ix_user_role_id"), "user", ["role_id"], unique=False)
    op.create_foreign_key("fk_user_role_id", "user", "role", ["role_id"], ["id"])

    # Weise existierenden Benutzern die Standardrolle 'user' zu
    op.execute(
        "UPDATE \"user\" SET role_id = (SELECT id FROM role WHERE name = 'user')"
    )

    # Mache role_id nicht nullable
    op.alter_column("user", "role_id", nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("fk_user_role_id", "user", type_="foreignkey")
    op.drop_index(op.f("ix_user_role_id"), table_name="user")
    op.drop_column("user", "role_id")
    # ### end Alembic commands ###
